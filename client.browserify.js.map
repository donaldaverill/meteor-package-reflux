{
  "version": 3,
  "sources": [
    "../../../../../../../../../../../.meteor/packages/cosmos_browserify/.0.5.0.16n957b++os+web.browser+web.cordova/plugin.CosmosBrowserify.os/npm/CosmosBrowserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "_stream_0.js",
    "node_modules/reflux/node_modules/eventemitter3/index.js",
    "node_modules/reflux/node_modules/reflux-core/lib/ActionMethods.js",
    "node_modules/reflux/node_modules/reflux-core/lib/Keep.js",
    "node_modules/reflux/node_modules/reflux-core/lib/ListenerMethods.js",
    "node_modules/reflux/node_modules/reflux-core/lib/PublisherMethods.js",
    "node_modules/reflux/node_modules/reflux-core/lib/StoreMethods.js",
    "node_modules/reflux/node_modules/reflux-core/lib/bindMethods.js",
    "node_modules/reflux/node_modules/reflux-core/lib/createAction.js",
    "node_modules/reflux/node_modules/reflux-core/lib/createStore.js",
    "node_modules/reflux/node_modules/reflux-core/lib/index.js",
    "node_modules/reflux/node_modules/reflux-core/lib/joins.js",
    "node_modules/reflux/node_modules/reflux-core/lib/mixer.js",
    "node_modules/reflux/node_modules/reflux-core/lib/utils.js",
    "node_modules/reflux/src/ListenerMixin.js",
    "node_modules/reflux/src/connect.js",
    "node_modules/reflux/src/connectFilter.js",
    "node_modules/reflux/src/index.js",
    "node_modules/reflux/src/listenTo.js",
    "node_modules/reflux/src/listenToMany.js"
  ],
  "names": [],
  "mappingstQA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbxtLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtnlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "Reflux = require('reflux');\n",
    "'use strict';\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",
    "/**\n * A module of methods that you want to include in all actions.\n * This module is consumed by `createAction`.\n */\n\"use strict\";\n\nmodule.exports = {};",
    "\"use strict\";\n\nexports.createdStores = [];\n\nexports.createdActions = [];\n\nexports.reset = function () {\n    while (exports.createdStores.length) {\n        exports.createdStores.pop();\n    }\n    while (exports.createdActions.length) {\n        exports.createdActions.pop();\n    }\n};",
    "\"use strict\";\n\nvar _ = require(\"./utils\"),\n    maker = require(\"./joins\").instanceJoinCreator;\n\n/**\n * Extract child listenables from a parent from their\n * children property and return them in a keyed Object\n *\n * @param {Object} listenable The parent listenable\n */\nvar mapChildListenables = function mapChildListenables(listenable) {\n    var i = 0,\n        children = {},\n        childName;\n    for (; i < (listenable.children || []).length; ++i) {\n        childName = listenable.children[i];\n        if (listenable[childName]) {\n            children[childName] = listenable[childName];\n        }\n    }\n    return children;\n};\n\n/**\n * Make a flat dictionary of all listenables including their\n * possible children (recursively), concatenating names in camelCase.\n *\n * @param {Object} listenables The top-level listenables\n */\nvar flattenListenables = function flattenListenables(listenables) {\n    var flattened = {};\n    for (var key in listenables) {\n        var listenable = listenables[key];\n        var childMap = mapChildListenables(listenable);\n\n        // recursively flatten children\n        var children = flattenListenables(childMap);\n\n        // add the primary listenable and chilren\n        flattened[key] = listenable;\n        for (var childKey in children) {\n            var childListenable = children[childKey];\n            flattened[key + _.capitalize(childKey)] = childListenable;\n        }\n    }\n\n    return flattened;\n};\n\n/**\n * A module of methods related to listening.\n */\nmodule.exports = {\n\n    /**\n     * An internal utility function used by `validateListening`\n     *\n     * @param {Action|Store} listenable The listenable we want to search for\n     * @returns {Boolean} The result of a recursive search among `this.subscriptions`\n     */\n    hasListener: function hasListener(listenable) {\n        var i = 0,\n            j,\n            listener,\n            listenables;\n        for (; i < (this.subscriptions || []).length; ++i) {\n            listenables = [].concat(this.subscriptions[i].listenable);\n            for (j = 0; j < listenables.length; j++) {\n                listener = listenables[j];\n                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /**\n     * A convenience method that listens to all listenables in the given object.\n     *\n     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.\n     */\n    listenToMany: function listenToMany(listenables) {\n        var allListenables = flattenListenables(listenables);\n        for (var key in allListenables) {\n            var cbname = _.callbackName(key),\n                localname = this[cbname] ? cbname : this[key] ? key : undefined;\n            if (localname) {\n                this.listenTo(allListenables[key], localname, this[cbname + \"Default\"] || this[localname + \"Default\"] || localname);\n            }\n        }\n    },\n\n    /**\n     * Checks if the current context can listen to the supplied listenable\n     *\n     * @param {Action|Store} listenable An Action or Store that should be\n     *  listened to.\n     * @returns {String|Undefined} An error message, or undefined if there was no problem.\n     */\n    validateListening: function validateListening(listenable) {\n        if (listenable === this) {\n            return \"Listener is not able to listen to itself\";\n        }\n        if (!_.isFunction(listenable.listen)) {\n            return listenable + \" is missing a listen method\";\n        }\n        if (listenable.hasListener && listenable.hasListener(this)) {\n            return \"Listener cannot listen to this listenable because of circular loop\";\n        }\n    },\n\n    /**\n     * Sets up a subscription to the given listenable for the context object\n     *\n     * @param {Action|Store} listenable An Action or Store that should be\n     *  listened to.\n     * @param {Function|String} callback The callback to register as event handler\n     * @param {Function|String} defaultCallback The callback to register as default handler\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to\n     */\n    listenTo: function listenTo(listenable, callback, defaultCallback) {\n        var desub,\n            unsubscriber,\n            subscriptionobj,\n            subs = this.subscriptions = this.subscriptions || [];\n        _.throwIf(this.validateListening(listenable));\n        this.fetchInitialState(listenable, defaultCallback);\n        desub = listenable.listen(this[callback] || callback, this);\n        unsubscriber = function () {\n            var index = subs.indexOf(subscriptionobj);\n            _.throwIf(index === -1, \"Tried to remove listen already gone from subscriptions list!\");\n            subs.splice(index, 1);\n            desub();\n        };\n        subscriptionobj = {\n            stop: unsubscriber,\n            listenable: listenable\n        };\n        subs.push(subscriptionobj);\n        return subscriptionobj;\n    },\n\n    /**\n     * Stops listening to a single listenable\n     *\n     * @param {Action|Store} listenable The action or store we no longer want to listen to\n     * @returns {Boolean} True if a subscription was found and removed, otherwise false.\n     */\n    stopListeningTo: function stopListeningTo(listenable) {\n        var sub,\n            i = 0,\n            subs = this.subscriptions || [];\n        for (; i < subs.length; i++) {\n            sub = subs[i];\n            if (sub.listenable === listenable) {\n                sub.stop();\n                _.throwIf(subs.indexOf(sub) !== -1, \"Failed to remove listen from subscriptions list!\");\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Stops all subscriptions and empties subscriptions array\n     */\n    stopListeningToAll: function stopListeningToAll() {\n        var remaining,\n            subs = this.subscriptions || [];\n        while (remaining = subs.length) {\n            subs[0].stop();\n            _.throwIf(subs.length !== remaining - 1, \"Failed to remove listen from subscriptions list!\");\n        }\n    },\n\n    /**\n     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.\n     * @param {Action|Store} listenable The publisher we want to get initial state from\n     * @param {Function|String} defaultCallback The method to receive the data\n     */\n    fetchInitialState: function fetchInitialState(listenable, defaultCallback) {\n        defaultCallback = defaultCallback && this[defaultCallback] || defaultCallback;\n        var me = this;\n        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {\n            var data = listenable.getInitialState();\n            if (data && _.isFunction(data.then)) {\n                data.then(function () {\n                    defaultCallback.apply(me, arguments);\n                });\n            } else {\n                defaultCallback.call(this, data);\n            }\n        }\n    },\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with the last emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinTrailing: maker(\"last\"),\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with the first emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinLeading: maker(\"first\"),\n\n    /**\n     * The callback will be called once all listenables have triggered at least once.\n     * It will be invoked with all emission from each listenable.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinConcat: maker(\"all\"),\n\n    /**\n     * The callback will be called once all listenables have triggered.\n     * If a callback triggers twice before that happens, an error is thrown.\n     * @param {...Publishers} publishers Publishers that should be tracked.\n     * @param {Function|String} callback The method to call when all publishers have emitted\n     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables\n     */\n    joinStrict: maker(\"strict\")\n};",
    "\"use strict\";\n\nvar _ = require(\"./utils\");\n\n/**\n * A module of methods for object that you want to be able to listen to.\n * This module is consumed by `createStore` and `createAction`\n */\nmodule.exports = {\n\n    /**\n     * Hook used by the publisher that is invoked before emitting\n     * and before `shouldEmit`. The arguments are the ones that the action\n     * is invoked with. If this function returns something other than\n     * undefined, that will be passed on as arguments for shouldEmit and\n     * emission.\n     */\n    preEmit: function preEmit() {},\n\n    /**\n     * Hook used by the publisher after `preEmit` to determine if the\n     * event should be emitted with given arguments. This may be overridden\n     * in your application, default implementation always returns true.\n     *\n     * @returns {Boolean} true if event should be emitted\n     */\n    shouldEmit: function shouldEmit() {\n        return true;\n    },\n\n    /**\n     * Subscribes the given callback for action triggered\n     *\n     * @param {Function} callback The callback to register as event handler\n     * @param {Mixed} [optional] bindContext The context to bind the callback with\n     * @returns {Function} Callback that unsubscribes the registered event handler\n     */\n    listen: function listen(callback, bindContext) {\n        bindContext = bindContext || this;\n        var eventHandler = function eventHandler(args) {\n            if (aborted) {\n                return;\n            }\n            callback.apply(bindContext, args);\n        },\n            me = this,\n            aborted = false;\n        this.emitter.addListener(this.eventLabel, eventHandler);\n        return function () {\n            aborted = true;\n            me.emitter.removeListener(me.eventLabel, eventHandler);\n        };\n    },\n\n    /**\n     * Attach handlers to promise that trigger the completed and failed\n     * child publishers, if available.\n     *\n     * @param {Object} The promise to attach to\n     */\n    promise: function promise(_promise) {\n        var me = this;\n\n        var canHandlePromise = this.children.indexOf(\"completed\") >= 0 && this.children.indexOf(\"failed\") >= 0;\n\n        if (!canHandlePromise) {\n            throw new Error(\"Publisher must have \\\"completed\\\" and \\\"failed\\\" child publishers\");\n        }\n\n        _promise.then(function (response) {\n            return me.completed(response);\n        }, function (error) {\n            return me.failed(error);\n        });\n    },\n\n    /**\n     * Subscribes the given callback for action triggered, which should\n     * return a promise that in turn is passed to `this.promise`\n     *\n     * @param {Function} callback The callback to register as event handler\n     */\n    listenAndPromise: function listenAndPromise(callback, bindContext) {\n        var me = this;\n        bindContext = bindContext || this;\n        this.willCallPromise = (this.willCallPromise || 0) + 1;\n\n        var removeListen = this.listen(function () {\n\n            if (!callback) {\n                throw new Error(\"Expected a function returning a promise but got \" + callback);\n            }\n\n            var args = arguments,\n                promise = callback.apply(bindContext, args);\n            return me.promise.call(me, promise);\n        }, bindContext);\n\n        return function () {\n            me.willCallPromise--;\n            removeListen.call(me);\n        };\n    },\n\n    /**\n     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)\n     */\n    trigger: function trigger() {\n        var args = arguments,\n            pre = this.preEmit.apply(this, args);\n        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);\n        if (this.shouldEmit.apply(this, args)) {\n            this.emitter.emit(this.eventLabel, args);\n        }\n    },\n\n    /**\n     * Tries to publish the event on the next tick\n     */\n    triggerAsync: function triggerAsync() {\n        var args = arguments,\n            me = this;\n        _.nextTick(function () {\n            me.trigger.apply(me, args);\n        });\n    },\n\n    /**\n     * Returns a Promise for the triggered action\n     *\n     * @return {Promise}\n     *   Resolved by completed child action.\n     *   Rejected by failed child action.\n     *   If listenAndPromise'd, then promise associated to this trigger.\n     *   Otherwise, the promise is for next child action completion.\n     */\n    triggerPromise: function triggerPromise() {\n        var me = this;\n        var args = arguments;\n\n        var canHandlePromise = this.children.indexOf(\"completed\") >= 0 && this.children.indexOf(\"failed\") >= 0;\n\n        var promise = _.createPromise(function (resolve, reject) {\n            // If `listenAndPromise` is listening\n            // patch `promise` w/ context-loaded resolve/reject\n            if (me.willCallPromise) {\n                _.nextTick(function () {\n                    var previousPromise = me.promise;\n                    me.promise = function (inputPromise) {\n                        inputPromise.then(resolve, reject);\n                        // Back to your regularly schedule programming.\n                        me.promise = previousPromise;\n                        return me.promise.apply(me, arguments);\n                    };\n                    me.trigger.apply(me, args);\n                });\n                return;\n            }\n\n            if (canHandlePromise) {\n                var removeSuccess = me.completed.listen(function (argsArr) {\n                    removeSuccess();\n                    removeFailed();\n                    resolve(argsArr);\n                });\n\n                var removeFailed = me.failed.listen(function (argsArr) {\n                    removeSuccess();\n                    removeFailed();\n                    reject(argsArr);\n                });\n            }\n\n            me.triggerAsync.apply(me, args);\n\n            if (!canHandlePromise) {\n                resolve();\n            }\n        });\n\n        return promise;\n    }\n};",
    "/**\n * A module of methods that you want to include in all stores.\n * This module is consumed by `createStore`.\n */\n\"use strict\";\n\nmodule.exports = {};",
    "\"use strict\";\n\nmodule.exports = function (store, definition) {\n    for (var name in definition) {\n        if (Object.getOwnPropertyDescriptor && Object.defineProperty) {\n            var propertyDescriptor = Object.getOwnPropertyDescriptor(definition, name);\n\n            if (!propertyDescriptor.value || typeof propertyDescriptor.value !== \"function\" || !definition.hasOwnProperty(name)) {\n                continue;\n            }\n\n            store[name] = definition[name].bind(store);\n        } else {\n            var property = definition[name];\n\n            if (typeof property !== \"function\" || !definition.hasOwnProperty(name)) {\n                continue;\n            }\n\n            store[name] = property.bind(store);\n        }\n    }\n\n    return store;\n};",
    "\"use strict\";\n\nvar _ = require(\"./utils\"),\n    ActionMethods = require(\"./ActionMethods\"),\n    PublisherMethods = require(\"./PublisherMethods\"),\n    Keep = require(\"./Keep\");\n\nvar allowed = { preEmit: 1, shouldEmit: 1 };\n\n/**\n * Creates an action functor object. It is mixed in with functions\n * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may\n * be overridden in the definition object.\n *\n * @param {Object} definition The action object definition\n */\nvar createAction = function createAction(definition) {\n\n    definition = definition || {};\n    if (!_.isObject(definition)) {\n        definition = { actionName: definition };\n    }\n\n    for (var a in ActionMethods) {\n        if (!allowed[a] && PublisherMethods[a]) {\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }\n    }\n\n    for (var d in definition) {\n        if (!allowed[d] && PublisherMethods[d]) {\n            throw new Error(\"Cannot override API method \" + d + \" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.\");\n        }\n    }\n\n    definition.children = definition.children || [];\n    if (definition.asyncResult) {\n        definition.children = definition.children.concat([\"completed\", \"failed\"]);\n    }\n\n    var i = 0,\n        childActions = {};\n    for (; i < definition.children.length; i++) {\n        var name = definition.children[i];\n        childActions[name] = createAction(name);\n    }\n\n    var context = _.extend({\n        eventLabel: \"action\",\n        emitter: new _.EventEmitter(),\n        _isAction: true\n    }, PublisherMethods, ActionMethods, definition);\n\n    var functor = function functor() {\n        var triggerType = functor.sync ? \"trigger\" : _.environment.hasPromise ? \"triggerPromise\" : \"triggerAsync\";\n        return functor[triggerType].apply(functor, arguments);\n    };\n\n    _.extend(functor, childActions, context);\n\n    Keep.createdActions.push(functor);\n\n    return functor;\n};\n\nmodule.exports = createAction;",
    "\"use strict\";\n\nvar _ = require(\"./utils\"),\n    Keep = require(\"./Keep\"),\n    mixer = require(\"./mixer\"),\n    bindMethods = require(\"./bindMethods\");\n\nvar allowed = { preEmit: 1, shouldEmit: 1 };\n\n/**\n * Creates an event emitting Data Store. It is mixed in with functions\n * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`\n * and `shouldEmit` may be overridden in the definition object.\n *\n * @param {Object} definition The data store object definition\n * @returns {Store} A data store instance\n */\nmodule.exports = function (definition) {\n\n    var StoreMethods = require(\"./StoreMethods\"),\n        PublisherMethods = require(\"./PublisherMethods\"),\n        ListenerMethods = require(\"./ListenerMethods\");\n\n    definition = definition || {};\n\n    for (var a in StoreMethods) {\n        if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    for (var d in definition) {\n        if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {\n            throw new Error(\"Cannot override API method \" + d + \" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    definition = mixer(definition);\n\n    function Store() {\n        var i = 0,\n            arr;\n        this.subscriptions = [];\n        this.emitter = new _.EventEmitter();\n        this.eventLabel = \"change\";\n        bindMethods(this, definition);\n        if (this.init && _.isFunction(this.init)) {\n            this.init();\n        }\n        if (this.listenables) {\n            arr = [].concat(this.listenables);\n            for (; i < arr.length; i++) {\n                this.listenToMany(arr[i]);\n            }\n        }\n    }\n\n    _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);\n\n    var store = new Store();\n    Keep.createdStores.push(store);\n\n    return store;\n};",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Reflux = {\n    version: {\n        \"reflux-core\": \"0.2.1\"\n    }\n};\n\nReflux.ActionMethods = require(\"./ActionMethods\");\n\nReflux.ListenerMethods = require(\"./ListenerMethods\");\n\nReflux.PublisherMethods = require(\"./PublisherMethods\");\n\nReflux.StoreMethods = require(\"./StoreMethods\");\n\nReflux.createAction = require(\"./createAction\");\n\nReflux.createStore = require(\"./createStore\");\n\nvar maker = require(\"./joins\").staticJoinCreator;\n\nReflux.joinTrailing = Reflux.all = maker(\"last\"); // Reflux.all alias for backward compatibility\n\nReflux.joinLeading = maker(\"first\");\n\nReflux.joinStrict = maker(\"strict\");\n\nReflux.joinConcat = maker(\"all\");\n\nvar _ = Reflux.utils = require(\"./utils\");\n\nReflux.EventEmitter = _.EventEmitter;\n\nReflux.Promise = _.Promise;\n\n/**\n * Convenience function for creating a set of actions\n *\n * @param definitions the definitions for the actions to be created\n * @returns an object with actions of corresponding action names\n */\nReflux.createActions = (function () {\n    var reducer = function reducer(definitions, actions) {\n        Object.keys(definitions).forEach(function (actionName) {\n            var val = definitions[actionName];\n            actions[actionName] = Reflux.createAction(val);\n        });\n    };\n\n    return function (definitions) {\n        var actions = {};\n        if (definitions instanceof Array) {\n            definitions.forEach(function (val) {\n                if (_.isObject(val)) {\n                    reducer(val, actions);\n                } else {\n                    actions[val] = Reflux.createAction(val);\n                }\n            });\n        } else {\n            reducer(definitions, actions);\n        }\n        return actions;\n    };\n})();\n\n/**\n * Sets the eventmitter that Reflux uses\n */\nReflux.setEventEmitter = function (ctx) {\n    Reflux.EventEmitter = _.EventEmitter = ctx;\n};\n\n/**\n * Sets the Promise library that Reflux uses\n */\nReflux.setPromise = function (ctx) {\n    Reflux.Promise = _.Promise = ctx;\n};\n\n/**\n * Sets the Promise factory that creates new promises\n * @param {Function} factory has the signature `function(resolver) { return [new Promise]; }`\n */\nReflux.setPromiseFactory = function (factory) {\n    _.createPromise = factory;\n};\n\n/**\n * Sets the method used for deferring actions and stores\n */\nReflux.nextTick = function (nextTick) {\n    _.nextTick = nextTick;\n};\n\nReflux.use = function (pluginCb) {\n    pluginCb(Reflux);\n};\n\n/**\n * Provides the set of created actions and stores for introspection\n */\n/*eslint-disable no-underscore-dangle*/\nReflux.__keep = require(\"./Keep\");\n/*eslint-enable no-underscore-dangle*/\n\n/**\n * Warn if Function.prototype.bind not available\n */\nif (!Function.prototype.bind) {\n    console.error(\"Function.prototype.bind not available. \" + \"ES5 shim required. \" + \"https://github.com/spoike/refluxjs#es5\");\n}\n\nexports[\"default\"] = Reflux;\nmodule.exports = exports[\"default\"];",
    "/**\n * Internal module used to create static and instance join methods\n */\n\n\"use strict\";\n\nvar createStore = require(\"./createStore\"),\n    _ = require(\"./utils\");\n\nvar slice = Array.prototype.slice,\n    strategyMethodNames = {\n    strict: \"joinStrict\",\n    first: \"joinLeading\",\n    last: \"joinTrailing\",\n    all: \"joinConcat\"\n};\n\n/**\n * Used in `index.js` to create the static join methods\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments\n * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy\n */\nexports.staticJoinCreator = function (strategy) {\n    return function () /* listenables... */{\n        var listenables = slice.call(arguments);\n        return createStore({\n            init: function init() {\n                this[strategyMethodNames[strategy]].apply(this, listenables.concat(\"triggerAsync\"));\n            }\n        });\n    };\n};\n\n/**\n * Used in `ListenerMethods.js` to create the instance join methods\n * @param {String} strategy Which strategy to use when tracking listenable trigger arguments\n * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy\n */\nexports.instanceJoinCreator = function (strategy) {\n    return function () /* listenables..., callback*/{\n        _.throwIf(arguments.length < 2, \"Cannot create a join with less than 2 listenables!\");\n        var listenables = slice.call(arguments),\n            callback = listenables.pop(),\n            numberOfListenables = listenables.length,\n            join = {\n            numberOfListenables: numberOfListenables,\n            callback: this[callback] || callback,\n            listener: this,\n            strategy: strategy\n        },\n            i,\n            cancels = [],\n            subobj;\n        for (i = 0; i < numberOfListenables; i++) {\n            _.throwIf(this.validateListening(listenables[i]));\n        }\n        for (i = 0; i < numberOfListenables; i++) {\n            cancels.push(listenables[i].listen(newListener(i, join), this));\n        }\n        reset(join);\n        subobj = { listenable: listenables };\n        subobj.stop = makeStopper(subobj, cancels, this);\n        this.subscriptions = (this.subscriptions || []).concat(subobj);\n        return subobj;\n    };\n};\n\n// ---- internal join functions ----\n\nfunction makeStopper(subobj, cancels, context) {\n    return function () {\n        var i,\n            subs = context.subscriptions,\n            index = subs ? subs.indexOf(subobj) : -1;\n        _.throwIf(index === -1, \"Tried to remove join already gone from subscriptions list!\");\n        for (i = 0; i < cancels.length; i++) {\n            cancels[i]();\n        }\n        subs.splice(index, 1);\n    };\n}\n\nfunction reset(join) {\n    join.listenablesEmitted = new Array(join.numberOfListenables);\n    join.args = new Array(join.numberOfListenables);\n}\n\nfunction newListener(i, join) {\n    return function () {\n        var callargs = slice.call(arguments);\n        if (join.listenablesEmitted[i]) {\n            switch (join.strategy) {\n                case \"strict\":\n                    throw new Error(\"Strict join failed because listener triggered twice.\");\n                case \"last\":\n                    join.args[i] = callargs;break;\n                case \"all\":\n                    join.args[i].push(callargs);\n            }\n        } else {\n            join.listenablesEmitted[i] = true;\n            join.args[i] = join.strategy === \"all\" ? [callargs] : callargs;\n        }\n        emitIfAllListenablesEmitted(join);\n    };\n}\n\nfunction emitIfAllListenablesEmitted(join) {\n    for (var i = 0; i < join.numberOfListenables; i++) {\n        if (!join.listenablesEmitted[i]) {\n            return;\n        }\n    }\n    join.callback.apply(join.listener, join.args);\n    reset(join);\n}",
    "\"use strict\";\n\nvar _ = require(\"./utils\");\n\nmodule.exports = function mix(def) {\n    var composed = {\n        init: [],\n        preEmit: [],\n        shouldEmit: []\n    };\n\n    var updated = (function mixDef(mixin) {\n        var mixed = {};\n        if (mixin.mixins) {\n            mixin.mixins.forEach(function (subMixin) {\n                _.extend(mixed, mixDef(subMixin));\n            });\n        }\n        _.extend(mixed, mixin);\n        Object.keys(composed).forEach(function (composable) {\n            if (mixin.hasOwnProperty(composable)) {\n                composed[composable].push(mixin[composable]);\n            }\n        });\n        return mixed;\n    })(def);\n\n    if (composed.init.length > 1) {\n        updated.init = function () {\n            var args = arguments;\n            composed.init.forEach(function (init) {\n                init.apply(this, args);\n            }, this);\n        };\n    }\n    if (composed.preEmit.length > 1) {\n        updated.preEmit = function () {\n            return composed.preEmit.reduce((function (args, preEmit) {\n                var newValue = preEmit.apply(this, args);\n                return newValue === undefined ? args : [newValue];\n            }).bind(this), arguments);\n        };\n    }\n    if (composed.shouldEmit.length > 1) {\n        updated.shouldEmit = function () {\n            var args = arguments;\n            return !composed.shouldEmit.some(function (shouldEmit) {\n                return !shouldEmit.apply(this, args);\n            }, this);\n        };\n    }\n    Object.keys(composed).forEach(function (composable) {\n        if (composed[composable].length === 1) {\n            updated[composable] = composed[composable][0];\n        }\n    });\n\n    return updated;\n};",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.capitalize = capitalize;\nexports.callbackName = callbackName;\nexports.isObject = isObject;\nexports.extend = extend;\nexports.isFunction = isFunction;\nexports.object = object;\nexports.isArguments = isArguments;\nexports.throwIf = throwIf;\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction callbackName(string, prefix) {\n    prefix = prefix || \"on\";\n    return prefix + exports.capitalize(string);\n}\n\nvar environment = {};\n\nexports.environment = environment;\nfunction checkEnv(target) {\n    var flag = undefined;\n    try {\n        /*eslint-disable no-eval */\n        if (eval(target)) {\n            flag = true;\n        }\n        /*eslint-enable no-eval */\n    } catch (e) {\n        flag = false;\n    }\n    environment[callbackName(target, \"has\")] = flag;\n}\ncheckEnv(\"setImmediate\");\ncheckEnv(\"Promise\");\n\n/*\n * isObject, extend, isFunction, isArguments are taken from undescore/lodash in\n * order to remove the dependency\n */\n\nfunction isObject(obj) {\n    var type = typeof obj;\n    return type === \"function\" || type === \"object\" && !!obj;\n}\n\nfunction extend(obj) {\n    if (!isObject(obj)) {\n        return obj;\n    }\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        source = arguments[i];\n        for (prop in source) {\n            if (Object.getOwnPropertyDescriptor && Object.defineProperty) {\n                var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);\n                Object.defineProperty(obj, prop, propertyDescriptor);\n            } else {\n                obj[prop] = source[prop];\n            }\n        }\n    }\n    return obj;\n}\n\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n\nexports.EventEmitter = require(\"eventemitter3\");\n\nif (environment.hasSetImmediate) {\n    exports.nextTick = function (callback) {\n        setImmediate(callback);\n    };\n} else {\n    exports.nextTick = function (callback) {\n        setTimeout(callback, 0);\n    };\n}\n\nfunction object(keys, vals) {\n    var o = {},\n        i = 0;\n    for (; i < keys.length; i++) {\n        o[keys[i]] = vals[i];\n    }\n    return o;\n}\n\nif (environment.hasPromise) {\n    exports.Promise = Promise;\n    exports.createPromise = function (resolver) {\n        return new exports.Promise(resolver);\n    };\n} else {\n    exports.Promise = null;\n    exports.createPromise = function () {};\n}\n\nfunction isArguments(value) {\n    return typeof value === \"object\" && \"callee\" in value && typeof value.length === \"number\";\n}\n\nfunction throwIf(val, msg) {\n    if (val) {\n        throw Error(msg || val);\n    }\n}",
    "var _ = require('reflux-core/lib/utils'),\n    ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A module meant to be consumed as a mixin by a React component. Supplies the methods from\n * `ListenerMethods` mixin and takes care of teardown of subscriptions.\n * Note that if you're using the `connect` mixin you don't need this mixin, as connect will\n * import everything this mixin contains!\n */\nmodule.exports = _.extend({\n\n    /**\n     * Cleans up all listener previously registered.\n     */\n    componentWillUnmount: ListenerMethods.stopListeningToAll\n\n}, ListenerMethods);\n",
    "var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function(listenable,key){\n    return {\n        getInitialState: function(){\n            if (!_.isFunction(listenable.getInitialState)) {\n                return {};\n            } else if (key === undefined) {\n                return listenable.getInitialState();\n            } else {\n                return _.object([key],[listenable.getInitialState()]);\n            }\n        },\n        componentDidMount: function(){\n            _.extend(this,ListenerMethods);\n            var me = this, cb = (key === undefined ? this.setState : function(v){\n                if (typeof me.isMounted === \"undefined\" || me.isMounted() === true) {\n                    me.setState(_.object([key],[v]));\n                }\n            });\n            this.listenTo(listenable,cb);\n        },\n        componentWillUnmount: ListenerMixin.componentWillUnmount\n    };\n};\n",
    "var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function(listenable, key, filterFunc) {\n    filterFunc = _.isFunction(key) ? key : filterFunc;\n    return {\n        getInitialState: function() {\n            if (!_.isFunction(listenable.getInitialState)) {\n                return {};\n            } else if (_.isFunction(key)) {\n                return filterFunc.call(this, listenable.getInitialState());\n            } else {\n                // Filter initial payload from store.\n                var result = filterFunc.call(this, listenable.getInitialState());\n                if (typeof(result) !== \"undefined\") {\n                    return _.object([key], [result]);\n                } else {\n                    return {};\n                }\n            }\n        },\n        componentDidMount: function() {\n            _.extend(this, ListenerMethods);\n            var me = this;\n            var cb = function(value) {\n                if (_.isFunction(key)) {\n                    me.setState(filterFunc.call(me, value));\n                } else {\n                    var result = filterFunc.call(me, value);\n                    me.setState(_.object([key], [result]));\n                }\n            };\n\n            this.listenTo(listenable, cb);\n        },\n        componentWillUnmount: ListenerMixin.componentWillUnmount\n    };\n};\n\n",
    "var Reflux = require('reflux-core');\n\nReflux.connect = require('./connect');\n\nReflux.connectFilter = require('./connectFilter');\n\nReflux.ListenerMixin = require('./ListenerMixin');\n\nReflux.listenTo = require('./listenTo');\n\nReflux.listenToMany = require('./listenToMany');\n\nmodule.exports = Reflux;\n",
    "var ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,\n * without having to manually set listeners in the `componentDidMount` method.\n *\n * @param {Action|Store} listenable An Action or Store that should be\n *  listened to.\n * @param {Function|String} callback The callback to register as event handler\n * @param {Function|String} defaultCallback The callback to register as default handler\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.\n */\nmodule.exports = function(listenable,callback,initial){\n    return {\n        /**\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\n         * and then make the call to `listenTo` with the arguments provided to the factory function\n         */\n        componentDidMount: function() {\n            for(var m in ListenerMethods){\n                if (this[m] !== ListenerMethods[m]){\n                    if (this[m]){\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenTo!\";\n                    }\n                    this[m] = ListenerMethods[m];\n                }\n            }\n            this.listenTo(listenable,callback,initial);\n        },\n        /**\n         * Cleans up all listener previously registered.\n         */\n        componentWillUnmount: ListenerMethods.stopListeningToAll\n    };\n};\n",
    "var ListenerMethods = require('reflux-core/lib/ListenerMethods');\n\n/**\n * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,\n * without having to manually set listeners in the `componentDidMount` method. This version is used\n * to automatically set up a `listenToMany` call.\n *\n * @param {Object} listenables An object of listenables\n * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.\n */\nmodule.exports = function(listenables){\n    return {\n        /**\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\n         * and then make the call to `listenTo` with the arguments provided to the factory function\n         */\n        componentDidMount: function() {\n            for(var m in ListenerMethods){\n                if (this[m] !== ListenerMethods[m]){\n                    if (this[m]){\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenToMany!\";\n                    }\n                    this[m] = ListenerMethods[m];\n                }\n            }\n            this.listenToMany(listenables);\n        },\n        /**\n         * Cleans up all listener previously registered.\n         */\n        componentWillUnmount: ListenerMethods.stopListeningToAll\n    };\n};\n"
  ]
}